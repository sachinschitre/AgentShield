name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  NODE_VERSION: '18'

jobs:
  # Create Release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd server && npm ci
          cd ../client && npm ci

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found, generating full changelog"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            echo "Generating changelog from $PREVIOUS_TAG"
            CHANGELOG=$(git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## AgentShield ${{ github.ref_name }}
            
            ### Changes
            ${{ steps.changelog.outputs.changelog }}
            
            ### Docker Images
            - Backend: `ghcr.io/${{ github.repository }}-backend:${{ github.ref_name }}`
            - Frontend: `ghcr.io/${{ github.repository }}-frontend:${{ github.ref_name }}`
            
            ### Installation
            ```bash
            # Clone the repository
            git clone https://github.com/${{ github.repository }}.git
            cd AgentShield
            
            # Checkout the release
            git checkout ${{ github.ref_name }}
            
            # Install dependencies
            npm install
            cd server && npm install
            cd ../client && npm install
            
            # Start the application
            npm run dev
            ```
            
            ### Docker Compose
            ```bash
            docker-compose up -d
            ```
            
            ### Security
            - All security vulnerabilities have been addressed
            - Dependencies are updated to latest stable versions
            - Security tests have passed
            
            ### Testing
            - All unit tests pass
            - Integration tests pass
            - End-to-end tests pass
            - Security tests pass
          draft: false
          prerelease: false

  # Build and Upload Assets
  build-assets:
    name: Build and Upload Assets
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd server && npm ci
          cd ../client && npm ci

      - name: Build application
        run: |
          # Build client
          cd client && npm run build
          
          # Create distribution package
          cd ..
          mkdir -p dist
          cp -r client/.next dist/
          cp -r server dist/
          cp package.json dist/
          cp README.md dist/
          cp LICENSE dist/

      - name: Create archive
        run: |
          if [ "$RUNNER_OS" = "Windows" ]; then
            powershell Compress-Archive -Path dist/* -DestinationPath agentshield-${{ github.ref_name }}-${{ matrix.os }}.zip
          else
            tar -czf agentshield-${{ github.ref_name }}-${{ matrix.os }}.tar.gz -C dist .
          fi

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./agentshield-${{ github.ref_name }}-${{ matrix.os }}.${{ matrix.os == 'Windows' && 'zip' || 'tar.gz' }}
          asset_name: agentshield-${{ github.ref_name }}-${{ matrix.os }}.${{ matrix.os == 'Windows' && 'zip' || 'tar.gz' }}
          asset_content_type: ${{ matrix.os == 'Windows' && 'application/zip' || 'application/gzip' }}

  # Docker Images
  docker-images:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: create-release
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}-backend
            ghcr.io/${{ github.repository }}-frontend
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}-backend:${{ github.ref_name }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./client
          file: ./client/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}-frontend:${{ github.ref_name }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ github.repository }}-backend:${{ github.ref_name }}'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Notify Release
  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, build-assets, docker-images, security-scan]
    if: always()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        if: always() && secrets.SLACK_WEBHOOK != ''
        with:
          status: ${{ job.status }}
          channel: '#releases'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            ðŸš€ New AgentShield Release: ${{ github.ref_name }}
            
            Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}
            
            Docker Images:
            - Backend: `ghcr.io/${{ github.repository }}-backend:${{ github.ref_name }}`
            - Frontend: `ghcr.io/${{ github.repository }}-frontend:${{ github.ref_name }}`
        continue-on-error: true
