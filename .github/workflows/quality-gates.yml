name: Quality Gates

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  COVERAGE_THRESHOLD: 80
  PERFORMANCE_THRESHOLD: 2000

jobs:
  # Code Quality Analysis
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    outputs:
      quality-score: ${{ steps.sonar.outputs.quality-score }}
      coverage: ${{ steps.coverage.outputs.coverage }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd server && npm ci
          cd ../client && npm ci

      - name: Run SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=agentshield
            -Dsonar.organization=sachinschitre
            -Dsonar.sources=server,client
            -Dsonar.javascript.lcov.reportPaths=client/coverage/lcov.info
            -Dsonar.coverage.exclusions=**/*.test.js,**/*.spec.js,**/node_modules/**
        continue-on-error: true

      - name: Extract Quality Score
        id: sonar
        run: |
          # Extract quality score from SonarCloud API
          QUALITY_SCORE=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: \
            "https://sonarcloud.io/api/measures/component?component=agentshield&metricKeys=quality_gate_details" \
            | jq -r '.component.measures[0].value // "0"')
          echo "quality-score=$QUALITY_SCORE" >> $GITHUB_OUTPUT

      - name: Run Coverage Analysis
        id: coverage
        run: |
          cd client && npm test -- --coverage --watchAll=false || echo "Tests completed with warnings"
          if [ -f "coverage/coverage-summary.json" ]; then
            COVERAGE=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct // 0')
            echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          else
            echo "coverage=0" >> $GITHUB_OUTPUT
          fi

  # Performance Testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 3

    outputs:
      performance-score: ${{ steps.performance.outputs.score }}
      load-test-results: ${{ steps.load-test.outputs.results }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd server && npm ci
          cd ../client && npm ci

      - name: Start server
        run: cd server && npm start &
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/agentshield_test
          JWT_SECRET: test-secret-key
          PORT: 5000

      - name: Wait for server
        run: npx wait-on http://localhost:5000/api/health

      - name: Run Performance Tests
        id: performance
        run: |
          echo "Running performance tests..."
          
          # Run Lighthouse CI
          npm install -g @lhci/cli
          lhci autorun --upload.target=temporary-public-storage || echo "Lighthouse tests completed with warnings"
          
          # Extract performance score
          if [ -f ".lighthouseci/assertion-results.json" ]; then
            PERFORMANCE_SCORE=$(cat .lighthouseci/assertion-results.json | jq -r '.assertions[] | select(.property == "performance") | .actual // 0')
          else
            PERFORMANCE_SCORE=0
          fi
          echo "score=$PERFORMANCE_SCORE" >> $GITHUB_OUTPUT

      - name: Run Load Tests
        id: load-test
        run: |
          echo "Running load tests with Artillery..."
          npm install -g artillery
          
          # Create load test configuration
          cat > load-test.yml << EOF
          config:
            target: 'http://localhost:5000'
            phases:
              - duration: 60
                arrivalRate: 10
          scenarios:
            - name: "API Load Test"
              weight: 100
              flow:
                - get:
                    url: "/api/health"
                - post:
                    url: "/api/auth/login"
                    json:
                      email: "test@example.com"
                      password: "testpassword"
          EOF
          
          artillery run load-test.yml --output load-test-results.json
          
          # Extract results
          RESULTS=$(cat load-test-results.json | jq -r '.aggregate.summary')
          echo "results=$RESULTS" >> $GITHUB_OUTPUT

      - name: Upload Performance Results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: |
            .lighthouseci/
            load-test-results.json

  # Security Quality Gates
  security-quality:
    name: Security Quality Gates
    runs-on: ubuntu-latest
    outputs:
      security-score: ${{ steps.security.outputs.score }}
      vulnerability-count: ${{ steps.vuln.outputs.count }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd server && npm ci
          cd ../client && npm ci

      - name: Run Security Audit
        id: vuln
        run: |
          echo "Running security audit..."
          
          # Run npm audit
          npm audit --audit-level=high --json > audit-results.json || true
          
          # Count vulnerabilities
          VULN_COUNT=$(cat audit-results.json | jq -r '.vulnerabilities | length')
          echo "count=$VULN_COUNT" >> $GITHUB_OUTPUT

      - name: Run Snyk Security Scan
        id: security
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json > snyk-results.json || true

      - name: Calculate Security Score
        run: |
          # Calculate security score based on vulnerabilities
          VULN_COUNT=${{ steps.vuln.outputs.count }}
          if [ "$VULN_COUNT" -eq 0 ]; then
            SECURITY_SCORE=100
          elif [ "$VULN_COUNT" -le 5 ]; then
            SECURITY_SCORE=80
          elif [ "$VULN_COUNT" -le 10 ]; then
            SECURITY_SCORE=60
          else
            SECURITY_SCORE=40
          fi
          
          echo "score=$SECURITY_SCORE" >> $GITHUB_OUTPUT

  # Quality Gate Decision
  quality-gate-decision:
    name: Quality Gate Decision
    runs-on: ubuntu-latest
    needs: [code-quality, performance-tests, security-quality]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Quality Gate Evaluation
        run: |
          echo "## Quality Gate Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Code Quality
          QUALITY_SCORE=${{ needs.code-quality.outputs.quality-score }}
          COVERAGE=${{ needs.code-quality.outputs.coverage }}
          
          if [ "$QUALITY_SCORE" -ge 80 ] && [ "$COVERAGE" -ge ${{ env.COVERAGE_THRESHOLD }} ]; then
            echo "✅ **Code Quality**: PASSED (Score: $QUALITY_SCORE, Coverage: $COVERAGE%)" >> $GITHUB_STEP_SUMMARY
            CODE_QUALITY_PASS=true
          else
            echo "❌ **Code Quality**: FAILED (Score: $QUALITY_SCORE, Coverage: $COVERAGE%)" >> $GITHUB_STEP_SUMMARY
            CODE_QUALITY_PASS=false
          fi
          
          # Performance
          PERFORMANCE_SCORE=${{ needs.performance-tests.outputs.performance-score }}
          
          if [ "$PERFORMANCE_SCORE" -ge ${{ env.PERFORMANCE_THRESHOLD }} ]; then
            echo "✅ **Performance**: PASSED (Score: $PERFORMANCE_SCORE)" >> $GITHUB_STEP_SUMMARY
            PERFORMANCE_PASS=true
          else
            echo "❌ **Performance**: FAILED (Score: $PERFORMANCE_SCORE)" >> $GITHUB_STEP_SUMMARY
            PERFORMANCE_PASS=false
          fi
          
          # Security
          SECURITY_SCORE=${{ needs.security-quality.outputs.security-score }}
          VULN_COUNT=${{ needs.security-quality.outputs.vulnerability-count }}
          
          if [ "$SECURITY_SCORE" -ge 80 ] && [ "$VULN_COUNT" -le 5 ]; then
            echo "✅ **Security**: PASSED (Score: $SECURITY_SCORE, Vulnerabilities: $VULN_COUNT)" >> $GITHUB_STEP_SUMMARY
            SECURITY_PASS=true
          else
            echo "❌ **Security**: FAILED (Score: $SECURITY_SCORE, Vulnerabilities: $VULN_COUNT)" >> $GITHUB_STEP_SUMMARY
            SECURITY_PASS=false
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall Decision
          if [ "$CODE_QUALITY_PASS" = true ] && [ "$PERFORMANCE_PASS" = true ] && [ "$SECURITY_PASS" = true ]; then
            echo "🎉 **OVERALL QUALITY GATE**: ✅ PASSED" >> $GITHUB_STEP_SUMMARY
            echo "All quality gates have been satisfied. This PR is ready for merge." >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            echo "🚫 **OVERALL QUALITY GATE**: ❌ FAILED" >> $GITHUB_STEP_SUMMARY
            echo "One or more quality gates have failed. Please address the issues before merging." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Comment PR with Quality Gate Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync(process.env.GITHUB_STEP_SUMMARY, 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      - name: Set PR Status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const codeQualityPass = '${{ needs.code-quality.result }}' === 'success';
            const performancePass = '${{ needs.performance-tests.result }}' === 'success';
            const securityPass = '${{ needs.security-quality.result }}' === 'success';
            
            const allPassed = codeQualityPass && performancePass && securityPass;
            
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: allPassed ? 'success' : 'failure',
              target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: allPassed ? 'All quality gates passed' : 'Quality gates failed',
              context: 'quality-gates'
            });
