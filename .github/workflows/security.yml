name: Security Workflow

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1' # Weekly security scan on Mondays at 2 AM

env:
  NODE_VERSION: '18'

jobs:
  # Dependency Security Scan
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd server && npm ci
          cd ../client && npm ci

      - name: Run npm audit
        run: |
          echo "Running npm audit for root dependencies..."
          npm audit --audit-level=moderate --json > audit-report.json || true
          
          echo "Running npm audit for server dependencies..."
          cd server && npm audit --audit-level=moderate --json > ../server-audit-report.json || true
          
          echo "Running npm audit for client dependencies..."
          cd ../client && npm audit --audit-level=moderate --json > ../client-audit-report.json || true

      - name: Upload audit reports
        uses: actions/upload-artifact@v4
        with:
          name: audit-reports
          path: |
            audit-report.json
            server-audit-report.json
            client-audit-report.json

  # Snyk Security Scan
  snyk-scan:
    name: Snyk Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd server && npm ci
          cd ../client && npm ci

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=package.json
        continue-on-error: true

      - name: Run Snyk to check server vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=server/package.json
        continue-on-error: true

      - name: Run Snyk to check client vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=client/package.json
        continue-on-error: true

  # CodeQL Security Analysis
  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # OWASP ZAP Security Scan
  owasp-scan:
    name: OWASP ZAP Security Scan
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd server && npm ci
          cd ../client && npm ci

      - name: Start server
        run: cd server && npm start &
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/agentshield_test
          JWT_SECRET: test-secret-key
          PORT: 5000

      - name: Wait for server
        run: npx wait-on http://localhost:5000/api/health

      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'http://localhost:5000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: OWASP ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.4.0
        with:
          target: 'http://localhost:5000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Upload ZAP results
        uses: actions/upload-artifact@v4
        with:
          name: zap-results
          path: |
            .zap/
            zap-results/

  # Cloudflare Security Tests
  cloudflare-security:
    name: Cloudflare Security Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd server && npm ci
          cd ../client && npm ci

      - name: Install Wrangler
        run: npm install -g wrangler

      - name: Run Cloudflare security tests
        run: |
          cd server
          npm run test:security || echo "Cloudflare tests completed with warnings"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        continue-on-error: true

      - name: Run Wrangler security tests
        run: |
          cd server
          npm run test:security || echo "Wrangler tests completed with warnings"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        continue-on-error: true

  # Security Report Generation
  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, snyk-scan, codeql-analysis, owasp-scan, cloudflare-security]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate Security Report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "Generated on: $(date)" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Scan Results" >> security-report.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-report.md
          echo "- Snyk Scan: ${{ needs.snyk-scan.result }}" >> security-report.md
          echo "- CodeQL Analysis: ${{ needs.codeql-analysis.result }}" >> security-report.md
          echo "- OWASP ZAP Scan: ${{ needs.owasp-scan.result }}" >> security-report.md
          echo "- Cloudflare Security: ${{ needs.cloudflare-security.result }}" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Recommendations" >> security-report.md
          echo "1. Review all high and critical vulnerabilities" >> security-report.md
          echo "2. Update dependencies with known vulnerabilities" >> security-report.md
          echo "3. Implement security headers and middleware" >> security-report.md
          echo "4. Regular security audits and penetration testing" >> security-report.md

      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md

      - name: Comment PR with Security Report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
